from database.connection import SessionLocal, engine
from database.models import Base, Role, RequestStatus, Status, Object, Tool, ToolName
from sqlalchemy.orm import Session
import random
from sqlalchemy import text

def init_database():
    """Initialize database with basic data"""
    # Create tables
    Base.metadata.create_all(bind=engine)
    
    db = SessionLocal()
    try:
        # Add basic roles
        roles_data = [
            {"name": "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"},
            {"name": "–ø—Ä–æ—Ä–∞–± –æ–±—ä–µ–∫—Ç–∞"},
            {"name": "—Ä–∞–±–æ—á–∏–π –Ω–∞ –æ–±—ä–µ–∫—Ç–µ"}
        ]
        
        for role_data in roles_data:
            role = db.query(Role).filter(Role.name == role_data["name"]).first()
            if not role:
                role = Role(**role_data)
                db.add(role)
        
        # Add request statuses (–¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é)
        request_statuses_data = [
            {"name": "–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è"},
            {"name": "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"}
        ]
        
        for status_data in request_statuses_data:
            status = db.query(RequestStatus).filter(RequestStatus.name == status_data["name"]).first()
            if not status:
                status = RequestStatus(**status_data)
                db.add(status)
        
        # Add tool statuses
        tool_statuses_data = [
            {"name": "–í –Ω–∞–ª–∏—á–∏–∏"},
            {"name": "–£—Ç–µ—Ä—è–Ω"},
            {"name": "–°–ø–∏—Å–∞–Ω"}
        ]
        
        for status_data in tool_statuses_data:
            status = db.query(Status).filter(Status.name == status_data["name"]).first()
            if not status:
                status = Status(**status_data)
                db.add(status)
        
        db.commit()
        print("‚úÖ Database initialized successfully!")
        
    except Exception as e:
        print(f"‚ùå Error initializing database: {e}")
        db.rollback()
    finally:
        db.close()

def create_test_data():
    """Create test data with tools on 3 objects"""
    db = SessionLocal()
    try:
        # Check if data already exists
        existing_objects = db.query(Object).count()
        if existing_objects > 0:
            print("‚ö†Ô∏è Test data already exists. Skipping creation.")
            return True
            
        # Create tool names
        tool_names = [
            "–ú–æ–ª–æ—Ç–æ–∫",
            "–û—Ç–≤–µ—Ä—Ç–∫–∞",
            "–î—Ä–µ–ª—å",
            "–®—É—Ä—É–ø–æ–≤–µ—Ä—Ç",
            "–ü–∏–ª–∞",
            "–†—É–±–∞–Ω–æ–∫",
            "–°—Ç–∞–º–µ—Å–∫–∞",
            "–ö–ª—é—á –≥–∞–µ—á–Ω—ã–π",
            "–ü–ª–æ—Å–∫–æ–≥—É–±—Ü—ã",
            "–ö—É—Å–∞—á–∫–∏",
            "–ù–æ–∂–æ–≤–∫–∞",
            "–¢–æ–ø–æ—Ä",
            "–õ–æ–ø–∞—Ç–∞",
            "–ö–∏—Å—Ç—å",
            "–í–∞–ª–∏–∫"
        ]
        
        tool_name_objects = []
        for name in tool_names:
            tool_name = ToolName(name=name)
            db.add(tool_name)
            tool_name_objects.append(tool_name)
        
        # Create objects
        objects = [
            Object(name="–û–±—ä–µ–∫—Ç –ê", location="—É–ª. –õ–µ–Ω–∏–Ω–∞, 1"),
            Object(name="–û–±—ä–µ–∫—Ç –ë", location="–ø—Ä. –ú–∏—Ä–∞, 15"),
            Object(name="–û–±—ä–µ–∫—Ç –í", location="—É–ª. –ü—É—à–∫–∏–Ω–∞, 8")
        ]
        
        for obj in objects:
            db.add(obj)
        
        db.commit()
        
        # Get status "–í –Ω–∞–ª–∏—á–∏–∏" (most common)
        available_status = db.query(Status).filter(Status.name == "–í –Ω–∞–ª–∏—á–∏–∏").first()
        if not available_status:
            print("‚ùå Status '–í –Ω–∞–ª–∏—á–∏–∏' not found!")
            return False
        
        # Create tools for each object
        for obj in objects:
            print(f"–°–æ–∑–¥–∞—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞: {obj.name}")
            
            # Select 10 random tool names for this object
            selected_tools = random.sample(tool_names, 10)
            
            for i, tool_name in enumerate(selected_tools):
                # Find tool name object
                tool_name_obj = db.query(ToolName).filter(ToolName.name == tool_name).first()
                if not tool_name_obj:
                    print(f"‚ùå Tool name '{tool_name}' not found!")
                    continue
                
                # Create tool
                tool = Tool(
                    inventory_number=f"INV-{obj.id:02d}-{i+1:03d}",
                    name_id=tool_name_obj.id,
                    qr_code_value=f"QR-{obj.id:02d}-{i+1:03d}",
                    current_object_id=obj.id,
                    status_id=available_status.id
                )
                db.add(tool)
        
        db.commit()
        print("‚úÖ Test data created successfully!")
        print(f"   - –°–æ–∑–¥–∞–Ω–æ {len(tool_names)} –Ω–∞–∑–≤–∞–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        print(f"   - –°–æ–∑–¥–∞–Ω–æ 3 —Å—Ç–∞—Ç—É—Å–∞")
        print(f"   - –°–æ–∑–¥–∞–Ω–æ {len(objects)} –æ–±—ä–µ–∫—Ç–æ–≤")
        print(f"   - –°–æ–∑–¥–∞–Ω–æ {len(objects) * 10} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–ø–æ 10 –Ω–∞ –æ–±—ä–µ–∫—Ç)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating test data: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def test_database_connection():
    """Test database connection"""
    try:
        # Test connection
        with engine.connect() as connection:
            result = connection.execute(text("SELECT 1"))
            print("‚úÖ Database connection successful!")
            
        # Test creating tables
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Tables created successfully!")
        
        # Test session
        db = SessionLocal()
        try:
            result = db.execute(text("SELECT version()"))
            row = result.fetchone()
            if row:
                version = row[0]
                print(f"‚úÖ Database session working! PostgreSQL version: {version}")
            else:
                print("‚úÖ Database session working!")
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå Database connection failed: {e}")
        return False
    
    return True

if __name__ == "__main__":
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if test_database_connection():
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        init_database()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        create_test_data()
        
        print("\n‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config.py") 
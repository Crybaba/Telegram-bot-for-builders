import xml.etree.ElementTree as ET
from typing import List
from database.models import Tool, Object, User
from datetime import datetime
import re

class InventoryReportService:
    @staticmethod
    def escape_markdown_v2(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2"""
        # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
        escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        for char in escape_chars:
            text = text.replace(char, f'\\{char}')
        
        return text

    @staticmethod
    def generate_inventory_xml(
        object_name: str,
        user_name: str,
        date: datetime,
        found_tools: List[Tool],
        missing_tools: List[Tool],
        total_tools: int
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç XML-–æ—Ç—á–µ—Ç –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
        root = ET.Element("InventoryReport")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = ET.SubElement(root, "Metadata")
        ET.SubElement(metadata, "Object").text = object_name
        ET.SubElement(metadata, "User").text = user_name
        ET.SubElement(metadata, "Date").text = date.strftime("%Y-%m-%d %H:%M:%S")
        ET.SubElement(metadata, "TotalTools").text = str(total_tools)
        ET.SubElement(metadata, "FoundTools").text = str(len(found_tools))
        ET.SubElement(metadata, "MissingTools").text = str(len(missing_tools))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        found_section = ET.SubElement(root, "FoundTools")
        for tool in found_tools:
            tool_elem = ET.SubElement(found_section, "Tool")
            ET.SubElement(tool_elem, "InventoryNumber").text = str(tool.inventory_number or "")
            ET.SubElement(tool_elem, "Name").text = str(tool.tool_name.name if tool.tool_name else "")
            ET.SubElement(tool_elem, "QRCode").text = str(tool.qr_code_value or "")
            ET.SubElement(tool_elem, "Status").text = "–í –Ω–∞–ª–∏—á–∏–∏"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        missing_section = ET.SubElement(root, "MissingTools")
        for tool in missing_tools:
            tool_elem = ET.SubElement(missing_section, "Tool")
            ET.SubElement(tool_elem, "InventoryNumber").text = str(tool.inventory_number or "")
            ET.SubElement(tool_elem, "Name").text = str(tool.tool_name.name if tool.tool_name else "")
            ET.SubElement(tool_elem, "QRCode").text = str(tool.qr_code_value or "")
            ET.SubElement(tool_elem, "Status").text = "–£—Ç–µ—Ä—è–Ω"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        xml_str = ET.tostring(root, encoding="utf-8", xml_declaration=True).decode("utf-8")
        return xml_str

    @staticmethod
    def generate_summary_text(
        object_name: str,
        found_tools: List[Tool],
        missing_tools: List[Tool],
        total_tools: int
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        
        summary = f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ '{object_name}'\n\n"
        summary += f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        summary += f"‚Ä¢ –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {total_tools}\n"
        summary += f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: {len(found_tools)} ‚úÖ\n"
        summary += f"‚Ä¢ –£—Ç–µ—Ä—è–Ω–æ: {len(missing_tools)} ‚ùå\n\n"
        
        if found_tools:
            summary += f"‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n"
            for tool in found_tools:
                tool_name = tool.tool_name.name if tool.tool_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
                inventory_number = tool.inventory_number or "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞"
                summary += f"‚Ä¢ {tool_name} (–∏–Ω–≤. ‚Ññ{inventory_number})\n"
            summary += "\n"
        
        if missing_tools:
            summary += f"‚ùå –£—Ç–µ—Ä—è–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n"
            for tool in missing_tools:
                tool_name = tool.tool_name.name if tool.tool_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
                inventory_number = tool.inventory_number or "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞"
                summary += f"‚Ä¢ {tool_name} (–∏–Ω–≤. ‚Ññ{inventory_number})\n"
        
        return summary 
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.user_service import UserService
from services.tool_request_service import ToolRequestService
from database.connection import get_db, SessionLocal
from database.models import User, Object, Tool, RequestStatus, Status
from aiogram import Bot
from services.inventory_check_service import InventoryCheckService
from sqlalchemy.orm import Session
from aiogram.fsm.state import State, StatesGroup
from bot.foreman_handlers import get_foreman_menu
from bot import handle_empty_data
from bot.foreman_handlers import send_notification_safely

router = Router()

# === Message Constants ===
MSG_NEED_USERNAME = "‚ùå –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram."
MSG_FOREMAN_MENU = "–ú–µ–Ω—é –±—Ä–∏–≥–∞–¥–∏—Ä–∞:"
MSG_WELCOME_REGISTER = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
MSG_CONTINUE_REGISTER = "üëã –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
MSG_ALREADY_REGISTERED = "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"
MSG_NO_OBJECT = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –æ–±—ä–µ–∫—Ç."
MSG_NO_TOOLS = "üîß –ù–∞ –≤–∞—à–µ–º –æ–±—ä–µ–∫—Ç–µ –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."
MSG_TOOLS_LIST = "üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ –≤–∞—à–µ–º –æ–±—ä–µ–∫—Ç–µ:\n"
MSG_NO_OTHER_OBJECTS = "–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."
MSG_SELECT_DONOR_OBJECT = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:"
MSG_OBJECT_NOT_FOUND = "‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
MSG_NO_TOOLS_ON_OBJECT = "–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."
MSG_SELECT_TOOL = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:"
MSG_REQUEST_SENT = "–ó–∞—è–≤–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è."
MSG_ENTER_NAME = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:"
MSG_NO_OBJECTS_FOR_REG = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
MSG_SELECT_OBJECT = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ:"
MSG_REG_ERROR = "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
MSG_REG_SENT = "–°–ø–∞—Å–∏–±–æ, {name}! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±—Ä–∏–≥–∞–¥–∏—Ä—É."
MSG_REG_CANCELLED = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
MSG_REQUEST_STATUS = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool_name}' {status}!"

class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_object = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ
def get_worker_menu(foreman_username=None):
    builder = InlineKeyboardBuilder()
    builder.button(text="üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ –æ–±—ä–µ–∫—Ç–µ", callback_data="my_tools")
    builder.button(text="üì¶ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", callback_data="request_tool")
    builder.adjust(1)
    return builder.as_markup()

# /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    username = message.from_user.username
    if not username:
        await message.answer(MSG_NEED_USERNAME)
        return
    username = f"@{username}"
    user = UserService.get_user_by_username(username)
    if user and user.role and user.role.name == "–ø—Ä–æ—Ä–∞–± –æ–±—ä–µ–∫—Ç–∞":
        await message.answer(MSG_FOREMAN_MENU, reply_markup=get_foreman_menu())
        return
    if not user:
        UserService.create_user(username)
        await message.answer(
            MSG_WELCOME_REGISTER,
            reply_markup=InlineKeyboardBuilder().button(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register").as_markup()
        )
        return
    if user.role.name == "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ" or not getattr(user, 'name', None) or not getattr(user, 'object', None):
        await message.answer(
            MSG_CONTINUE_REGISTER,
            reply_markup=InlineKeyboardBuilder().button(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register").as_markup()
        )
        return
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∏–≥–∞–¥–∏—Ä–µ –æ–±—ä–µ–∫—Ç–∞
    db = SessionLocal()
    try:
        foreman = db.query(User).filter(
            User.object_id == user.object.id,
            User.role_id == 2  # 2 = "–ø—Ä–æ—Ä–∞–± –æ–±—ä–µ–∫—Ç–∞"
        ).first()
        foreman_username = foreman.username if foreman else None
    finally:
        db.close()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—Ä–∏–≥–∞–¥–∏—Ä–µ
    menu_text = MSG_ALREADY_REGISTERED
    if foreman_username:
        menu_text += f"\n\nüë∑ –í–∞—à –±—Ä–∏–≥–∞–¥–∏—Ä: {foreman_username}"
    else:
        menu_text += f"\n\nüë∑ –ë—Ä–∏–≥–∞–¥–∏—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    
    await message.answer(
        menu_text,
        reply_markup=get_worker_menu()
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ
@router.callback_query(F.data == "my_tools")
async def show_my_tools(callback: CallbackQuery):
    username = callback.from_user.username
    if not username:
        await callback.answer(MSG_NO_OBJECT, show_alert=True)
        return
    username = f"@{username}"
    user = UserService.get_user_by_username(username)
    if not user or not getattr(user, 'object', None):
        await callback.answer(MSG_NO_OBJECT, show_alert=True)
        return
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    try:
        object_with_tools = db.query(Object).filter(Object.id == user.object.id).first()
        if not object_with_tools:
            await callback.answer(MSG_NO_OBJECT, show_alert=True)
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –∏—Ö —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        tools = db.query(Tool).filter(Tool.current_object_id == user.object.id).all()
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        for tool in tools:
            _ = tool.tool_name.name  # –ó–∞–≥—Ä—É–∂–∞–µ–º tool_name
            _ = tool.status.name     # –ó–∞–≥—Ä—É–∂–∞–µ–º status
            _ = tool.inventory_number  # –ó–∞–≥—Ä—É–∂–∞–µ–º inventory_number
    finally:
        db.close()
    
    if not tools:
        await handle_empty_data(callback, MSG_NO_TOOLS, "back_to_menu")
        return
    text = MSG_TOOLS_LIST
    for tool in tools:
        text += f"‚Ä¢ {tool.tool_name.name} (–∏–Ω–≤. ‚Ññ{tool.inventory_number}) ‚Äî {tool.status.name}\n"
    if callback.message:
        await callback.message.edit_text(text, reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu").as_markup())
    else:
        await callback.message.answer(text, reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu").as_markup())

# –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –¥—Ä—É–≥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
@router.callback_query(F.data == "request_tool")
async def request_tool(callback: CallbackQuery, state: FSMContext):
    username = callback.from_user.username
    if not username:
        await callback.answer(MSG_NO_OBJECT, show_alert=True)
        return
    username = f"@{username}"
    user = UserService.get_user_by_username(username)
    if not user or not getattr(user, 'object', None):
        await callback.answer(MSG_NO_OBJECT, show_alert=True)
        return
    db = SessionLocal()
    try:
        objects = db.query(Object).filter(Object.id != user.object.id).all()
    finally:
        db.close()
    if not objects:
        await handle_empty_data(callback, MSG_NO_OTHER_OBJECTS, "back_to_menu")
        return
    builder = InlineKeyboardBuilder()
    for obj in objects:
        builder.button(text=f"üèóÔ∏è {obj.name}", callback_data=f"select_donor_{obj.id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(1)
    if callback.message:
        await callback.message.edit_text(MSG_SELECT_DONOR_OBJECT, reply_markup=builder.as_markup())
    else:
        await callback.message.answer(MSG_SELECT_DONOR_OBJECT, reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("select_donor_"))
async def select_donor_object(callback: CallbackQuery, state: FSMContext):
    data = callback.data or ""
    if not data.startswith("select_donor_"):
        await callback.answer(MSG_OBJECT_NOT_FOUND, show_alert=True)
        return
    donor_object_id = int(data.removeprefix("select_donor_"))
    db = SessionLocal()
    try:
        donor_object = db.query(Object).filter(Object.id == donor_object_id).first()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å "–í –Ω–∞–ª–∏—á–∏–∏"
        available_status = db.query(Status).filter(Status.name == "–í –Ω–∞–ª–∏—á–∏–∏").first()
        if not available_status:
            await callback.answer("‚ùå –°—Ç–∞—Ç—É—Å '–í –Ω–∞–ª–∏—á–∏–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–í –Ω–∞–ª–∏—á–∏–∏"
        tools = db.query(Tool).filter(
            Tool.current_object_id == donor_object_id,
            Tool.status_id == available_status.id
        ).all()
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        tool_data = []
        for tool in tools:
            tool_name = tool.tool_name.name if tool.tool_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
            inventory_number = tool.inventory_number or "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞"
            tool_data.append({
                'id': tool.id,
                'name': tool_name,
                'inventory_number': inventory_number
            })
    finally:
        db.close()
    
    if not donor_object:
        await callback.answer(MSG_OBJECT_NOT_FOUND, show_alert=True)
        return
    if not tool_data:
        await handle_empty_data(callback, MSG_NO_TOOLS_ON_OBJECT, "request_tool")
        return
    
    builder = InlineKeyboardBuilder()
    for tool in tool_data:
        builder.button(text=f"{tool['name']} (–∏–Ω–≤. ‚Ññ{tool['inventory_number']})", callback_data=f"request_tool_{tool['id']}_{donor_object_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="request_tool")
    builder.adjust(1)
    if callback.message:
        await callback.message.edit_text(MSG_SELECT_TOOL, reply_markup=builder.as_markup())
    else:
        await callback.message.answer(MSG_SELECT_TOOL, reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("request_tool_"))
async def confirm_tool_request(callback: CallbackQuery, state: FSMContext):
    data = callback.data or ""
    if not data.startswith("request_tool_"):
        await callback.answer(MSG_NO_OBJECT, show_alert=True)
        return
    parts = data.split("_")
    if len(parts) < 4:
        await callback.answer(MSG_NO_OBJECT, show_alert=True)
        return
    tool_id = int(parts[2])
    from_object_id = int(parts[3])
    username = callback.from_user.username
    if not username:
        await callback.answer(MSG_NO_OBJECT, show_alert=True)
        return
    username = f"@{username}"
    user = UserService.get_user_by_username(username)
    if not user or not getattr(user, 'object', None):
        await callback.answer(MSG_NO_OBJECT, show_alert=True)
        return
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–∞–µ–º int id
    user_id = user.id
    if hasattr(user_id, 'value'):
        user_id = user_id.value
    try:
        user_id_int = int(user_id)
    except Exception:
        user_id_int = None
    if user_id_int is None:
        await callback.answer(MSG_NO_OBJECT, show_alert=True)
        return
    ToolRequestService.create_request(
        tool_id=tool_id,
        requester_id=user_id_int,
        from_object_id=from_object_id,
        to_object_id=user.object.id
    )
    if callback.message:
        await callback.message.edit_text(MSG_REQUEST_SENT, reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu").as_markup())
    else:
        await callback.message.answer(MSG_REQUEST_SENT, reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu").as_markup())

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏ (–ø—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
async def notify_user_about_request(bot: Bot, user_id: int, status: str, tool_name: str):
    user = UserService.get_user_by_id(user_id)
    if not user:
        return
    username = getattr(user, 'username', None)
    if not username:
        return
    text = MSG_REQUEST_STATUS.format(tool_name=tool_name, status=status.lower())
    await send_notification_safely(bot, str(username), text)

@router.callback_query(F.data == "register")
async def start_registration(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegistrationStates.waiting_for_name)
    await callback.message.answer(MSG_ENTER_NAME)

@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    db = SessionLocal()
    try:
        objects = db.query(Object).all()
    finally:
        db.close()
    if not objects:
        await message.answer(MSG_NO_OBJECTS_FOR_REG)
        await state.clear()
        return
    builder = InlineKeyboardBuilder()
    for obj in objects:
        builder.button(text=f"üèóÔ∏è {obj.name}", callback_data=f"select_object_{obj.id}")
    builder.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_registration")
    builder.adjust(1)
    await state.set_state(RegistrationStates.waiting_for_object)
    await message.answer(MSG_SELECT_OBJECT, reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("select_object_"), RegistrationStates.waiting_for_object)
async def process_object_selection(callback: CallbackQuery, state: FSMContext):
    data = callback.data or ""
    if not data.startswith("select_object_"):
        if callback.message:
            await callback.message.answer(MSG_REG_ERROR)
        await state.clear()
        return
    object_id = int(data.removeprefix("select_object_"))
    data_state = await state.get_data()
    name = data_state.get("name")
    username = callback.from_user.username
    if not name or not username:
        if callback.message:
            await callback.message.answer(MSG_REG_ERROR)
        await state.clear()
        return
    username = f"@{username}"
    user = UserService.get_user_by_username(username)
    if user:
        user_id = user.id
        if hasattr(user_id, 'value'):
            user_id = user_id.value
        try:
            user_id_int = int(user_id)
        except Exception:
            user_id_int = None
        if user_id_int is not None:
            UserService.update_user(user_id_int, name=name, object_id=object_id)
    if callback.message:
        await callback.message.answer(MSG_REG_SENT.format(name=name))
    await state.clear()

@router.callback_query(F.data == "cancel_registration", RegistrationStates.waiting_for_object)
async def cancel_registration(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(MSG_REG_CANCELLED) 

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    username = callback.from_user.username
    if not username:
        await callback.answer(MSG_NO_OBJECT, show_alert=True)
        return
    username = f"@{username}"
    user = UserService.get_user_by_username(username)
    if user and user.role and user.role.name == "–ø—Ä–æ—Ä–∞–± –æ–±—ä–µ–∫—Ç–∞":
        if callback.message:
            await callback.message.edit_text(MSG_FOREMAN_MENU, reply_markup=get_foreman_menu())
        else:
            await callback.message.answer(MSG_FOREMAN_MENU, reply_markup=get_foreman_menu())
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∏–≥–∞–¥–∏—Ä–µ –æ–±—ä–µ–∫—Ç–∞
        db = SessionLocal()
        try:
            foreman = db.query(User).filter(
                User.object_id == user.object.id,
                User.role_id == 2  # 2 = "–ø—Ä–æ—Ä–∞–± –æ–±—ä–µ–∫—Ç–∞"
            ).first()
            foreman_username = foreman.username if foreman else None
        finally:
            db.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—Ä–∏–≥–∞–¥–∏—Ä–µ
        menu_text = MSG_ALREADY_REGISTERED
        if foreman_username:
            menu_text += f"\n\nüë∑ –í–∞—à –±—Ä–∏–≥–∞–¥–∏—Ä: {foreman_username}"
        else:
            menu_text += f"\n\nüë∑ –ë—Ä–∏–≥–∞–¥–∏—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        
        if callback.message:
            await callback.message.edit_text(menu_text, reply_markup=get_worker_menu())
        else:
            await callback.message.answer(menu_text, reply_markup=get_worker_menu()) 
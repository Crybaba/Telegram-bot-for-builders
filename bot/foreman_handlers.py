from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.user_service import UserService
from services.tool_request_service import ToolRequestService
from services.inventory_check_service import InventoryCheckService
from database.connection import SessionLocal
from database.models import User, Object, Tool, ToolRequest, InventoryCheck
from aiogram import Bot
from datetime import datetime
import xml.etree.ElementTree as ET
from services.qr_service import QRCodeService
from services.inventory_report_service import InventoryReportService
from bot import handle_empty_data

async def send_notification_safely(bot: Bot, user: any, message: str) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ chat_id
        if hasattr(user, 'chat_id') and user.chat_id:
            await bot.send_message(user.chat_id, message)
            return True
        
        # –ï—Å–ª–∏ –Ω–µ—Ç chat_id, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ username
        if hasattr(user, 'username') and user.username:
            username = str(user.username)
            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
            if username.startswith('@'):
                username = username[1:]
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(username, message)
            return True
            
        return False
    except Exception as e:
        error_message = str(e).lower()
        if "chat not found" in error_message or "user not found" in error_message:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {getattr(user, 'username', 'Unknown')} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")
        elif "blocked" in error_message:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {getattr(user, 'username', 'Unknown')} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        else:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {getattr(user, 'username', 'Unknown')}: {e}")
        return False

router = Router()

# === Message Constants ===
MSG_FOREMAN_MENU = "–ú–µ–Ω—é –±—Ä–∏–≥–∞–¥–∏—Ä–∞:"
MSG_NO_OBJECT = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –æ–±—ä–µ–∫—Ç."
MSG_NO_REGISTRATIONS = "–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –≤–∞—à –æ–±—ä–µ–∫—Ç."
MSG_REG_REQUEST = "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {username} ({name})"
MSG_REG_APPROVED = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"
MSG_REG_APPROVED_USER = "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–∞! –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –æ–±—ä–µ–∫—Ç: {object_name}"
MSG_REG_REJECTED = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!"
MSG_REG_REJECTED_USER = "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞."
MSG_REG_APPROVE_ERROR = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
MSG_REG_REJECT_ERROR = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
MSG_NO_TOOLS = "üîß –ù–∞ –≤–∞—à–µ–º –æ–±—ä–µ–∫—Ç–µ –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."
MSG_TOOLS_LIST = "üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ –≤–∞—à–µ–º –æ–±—ä–µ–∫—Ç–µ:\n"
MSG_NO_TOOL_REQUESTS = "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."
MSG_TOOL_REQUEST = "–ó–∞—è–≤–∫–∞: {tool_name} (–∏–Ω–≤. ‚Ññ{inv_num}) –¥–ª—è {to_object}"
MSG_TOOL_REQUEST_APPROVED = "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–Ω!"
MSG_TOOL_REQUEST_REJECTED = "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!"
MSG_INVENTORY_PHOTO_PROMPT = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ QR-–∫–æ–¥–æ–≤ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."
MSG_INVENTORY_PHOTO_RECEIVED = "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'."
MSG_INVENTORY_DONE = "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ—Ç XML –¥–ª—è 1C:"
MSG_NO_WORKERS = "–ù–∞ –≤–∞—à–µ–º –æ–±—ä–µ–∫—Ç–µ –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö."
MSG_WORKERS_LIST = "üë∑ –†–∞–±–æ—á–∏–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ:\n"
MSG_TOOL_REQUEST_APPROVED = "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool_name}' (–∏–Ω–≤. ‚Ññ{inventory_number}) –æ–¥–æ–±—Ä–µ–Ω–∞! –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –æ–±—ä–µ–∫—Ç '{object_name}'."
MSG_TOOL_REQUEST_REJECTED = "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool_name}' (–∏–Ω–≤. ‚Ññ{inventory_number}) –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –±—Ä–∏–≥–∞–¥–∏—Ä–∞
def get_foreman_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üë• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç", callback_data="registrations")
    builder.button(text="üë∑ –†–∞–±–æ—á–∏–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ", callback_data="object_workers")
    builder.button(text="üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ –æ–±—ä–µ–∫—Ç–µ", callback_data="foreman_tools")
    builder.button(text="üì¶ –ó–∞—è–≤–∫–∏ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="foreman_requests")
    builder.button(text="üìã –ü—Ä–æ–≤–µ—Å—Ç–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é", callback_data="start_inventory")
    builder.adjust(1)
    return builder.as_markup()

@router.message(Command("foreman"))
async def cmd_foreman_menu(message: Message):
    await message.answer(MSG_FOREMAN_MENU, reply_markup=get_foreman_menu())

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –æ–±—ä–µ–∫—Ç
@router.callback_query(F.data == "registrations")
async def show_registrations(callback: CallbackQuery):
    username = f"@{callback.from_user.username}" if callback.from_user.username else None
    user = UserService.get_user_by_username(username)
    if not user or not user.object:
        await callback.answer(MSG_NO_OBJECT, show_alert=True)
        return
    db = SessionLocal()
    try:
        registrations = db.query(User).filter(
            User.object_id == user.object.id, 
            User.role_id == 1
        ).all()
    finally:
        db.close()
    if not registrations:
        await handle_empty_data(callback, "–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –≤–∞—à –æ–±—ä–µ–∫—Ç.", "back_to_menu")
        return
    for reg in registrations:
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_reg_{reg.id}")
        builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_reg_{reg.id}")
        await callback.message.edit_text(f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {reg.username} ({reg.name or '–ë–µ–∑ –∏–º–µ–Ω–∏'})", reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("approve_reg_"))
async def approve_registration(callback: CallbackQuery):
    reg_id = int(callback.data.removeprefix("approve_reg_"))
    username = f"@{callback.from_user.username}" if callback.from_user.username else None
    foreman = UserService.get_user_by_username(username)
    if not foreman or not foreman.object:
        await callback.answer(MSG_NO_OBJECT, show_alert=True)
        return
    if UserService.approve_user(reg_id, foreman.object.id):
        await callback.message.edit_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu").as_markup())
        user = UserService.get_user_by_id(reg_id)
        if user and callback.bot:
            await send_notification_safely(
                callback.bot,
                user,
                MSG_REG_APPROVED_USER.format(object_name=foreman.object.name)
            )
    else:
        await callback.answer(MSG_REG_APPROVE_ERROR, show_alert=True)

@router.callback_query(F.data.startswith("reject_reg_"))
async def reject_registration(callback: CallbackQuery):
    reg_id = int(callback.data.removeprefix("reject_reg_"))
    if UserService.reject_user(reg_id):
        await callback.message.edit_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!", reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu").as_markup())
        user = UserService.get_user_by_id(reg_id)
        if user and callback.bot:
            await send_notification_safely(
                callback.bot,
                user,
                MSG_REG_REJECTED_USER
            )
    else:
        await callback.answer(MSG_REG_REJECT_ERROR, show_alert=True)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ
@router.callback_query(F.data == "foreman_tools")
async def show_foreman_tools(callback: CallbackQuery):
    username = f"@{callback.from_user.username}" if callback.from_user.username else None
    user = UserService.get_user_by_username(username)
    if not user or not user.object:
        await callback.answer(MSG_NO_OBJECT, show_alert=True)
        return
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    try:
        object_with_tools = db.query(Object).filter(Object.id == user.object.id).first()
        if not object_with_tools:
            await callback.answer(MSG_NO_OBJECT, show_alert=True)
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –∏—Ö —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        tools = db.query(Tool).filter(Tool.current_object_id == user.object.id).all()
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        for tool in tools:
            _ = tool.tool_name.name  # –ó–∞–≥—Ä—É–∂–∞–µ–º tool_name
            _ = tool.status.name     # –ó–∞–≥—Ä—É–∂–∞–µ–º status
            _ = tool.inventory_number  # –ó–∞–≥—Ä—É–∂–∞–µ–º inventory_number
    finally:
        db.close()
    
    if not tools:
        await callback.message.edit_text(MSG_NO_TOOLS, reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu").as_markup())
        return
    text = MSG_TOOLS_LIST
    for tool in tools:
        text += f"‚Ä¢ {tool.tool_name.name} (–∏–Ω–≤. ‚Ññ{tool.inventory_number}) ‚Äî {tool.status.name}\n"
    await callback.message.edit_text(text, reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu").as_markup())

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
@router.callback_query(F.data == "foreman_requests")
async def show_foreman_requests(callback: CallbackQuery):
    username = f"@{callback.from_user.username}" if callback.from_user.username else None
    user = UserService.get_user_by_username(username)
    if not user or not user.object:
        await callback.answer(MSG_NO_OBJECT, show_alert=True)
        return
    db = SessionLocal()
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã (–Ω–µ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å "–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
        requests = db.query(ToolRequest).filter(
            ToolRequest.from_object_id == user.object.id,
            ToolRequest.status_id != 2  # 2 = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
        ).all()
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        request_data = []
        for req in requests:
            tool_name = req.tool.tool_name.name if req.tool and req.tool.tool_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
            inventory_number = req.tool.inventory_number if req.tool else "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞"
            to_object_name = req.to_object.name if req.to_object else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç"
            requester_name = req.requester.name if req.requester else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            requester_username = req.requester.username if req.requester else "–ë–µ–∑ username"
            request_data.append({
                'id': req.id,
                'tool_name': tool_name,
                'inventory_number': inventory_number,
                'to_object_name': to_object_name,
                'requester_name': requester_name,
                'requester_username': requester_username
            })
    finally:
        db.close()
    
    if not request_data:
        await handle_empty_data(callback, "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.", "back_to_menu")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for req_data in request_data:
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_req_{req_data['id']}")
        builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_req_{req_data['id']}")
        builder.adjust(2)
        
        message_text = f"üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n\n"
        message_text += f"üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {req_data['tool_name']}\n"
        message_text += f"üìù –ò–Ω–≤. –Ω–æ–º–µ—Ä: {req_data['inventory_number']}\n"
        message_text += f"üèóÔ∏è –û–±—ä–µ–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {req_data['to_object_name']}\n"
        message_text += f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {req_data['requester_name']} ({req_data['requester_username']})"
        
        await callback.message.answer(message_text, reply_markup=builder.as_markup())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    await callback.message.answer("üìã –í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:", reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu").as_markup())

@router.callback_query(F.data.startswith("approve_req_"))
async def approve_tool_request(callback: CallbackQuery):
    req_id = int(callback.data.removeprefix("approve_req_"))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É
    username = f"@{callback.from_user.username}" if callback.from_user.username else None
    approver = UserService.get_user_by_username(username)
    if not approver:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", show_alert=True)
        return
    
    db = SessionLocal()
    try:
        req = db.query(ToolRequest).filter(ToolRequest.id == req_id).first()
        if req:
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" (id = 2)
            req.status_id = 2
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º approver_id
            req.approver_id = approver.id
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
            req.tool.current_object_id = req.to_object_id
            db.commit()
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π
            await callback.message.delete()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–Ω!", show_alert=True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É
            if req.requester and callback.bot:
                tool_name = req.tool.tool_name.name if req.tool and req.tool.tool_name else "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
                inventory_number = req.tool.inventory_number if req.tool else "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞"
                object_name = req.to_object.name if req.to_object else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç"
                notification_message = MSG_TOOL_REQUEST_APPROVED.format(
                    tool_name=tool_name,
                    inventory_number=inventory_number,
                    object_name=object_name
                )
                await send_notification_safely(callback.bot, req.requester, notification_message)
        else:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏!", show_alert=True)
    finally:
        db.close()

@router.callback_query(F.data.startswith("reject_req_"))
async def reject_tool_request(callback: CallbackQuery):
    req_id = int(callback.data.removeprefix("reject_req_"))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É
    username = f"@{callback.from_user.username}" if callback.from_user.username else None
    approver = UserService.get_user_by_username(username)
    if not approver:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", show_alert=True)
        return
    
    db = SessionLocal()
    try:
        req = db.query(ToolRequest).filter(ToolRequest.id == req_id).first()
        if req:
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" (id = 2)
            req.status_id = 2
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º approver_id
            req.approver_id = approver.id
            db.commit()
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π
            await callback.message.delete()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!", show_alert=True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É
            if req.requester and callback.bot:
                tool_name = req.tool.tool_name.name if req.tool and req.tool.tool_name else "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
                inventory_number = req.tool.inventory_number if req.tool else "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞"
                notification_message = MSG_TOOL_REQUEST_REJECTED.format(
                    tool_name=tool_name,
                    inventory_number=inventory_number
                )
                await send_notification_safely(callback.bot, req.requester, notification_message)
        else:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏!", show_alert=True)
    finally:
        db.close()

# –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è: FSM –¥–ª—è —Å–±–æ—Ä–∞ —Ñ–æ—Ç–æ QR-–∫–æ–¥–æ–≤
from aiogram.fsm.state import State, StatesGroup

class InventoryStates(StatesGroup):
    waiting_for_photos = State()
    confirm = State()

@router.callback_query(F.data == "start_inventory")
async def start_inventory(callback: CallbackQuery, state: FSMContext):
    await state.set_state(InventoryStates.waiting_for_photos)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(message_id=callback.message.message_id)
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ QR-–∫–æ–¥–æ–≤ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n\nüì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—É—á–µ–Ω–æ: 0", reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu").as_markup())

@router.message(InventoryStates.waiting_for_photos)
async def receive_photos(message: Message, state: FSMContext):
    photos = (await state.get_data()).get("photos", [])
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    data = await state.get_data()
    message_id = data.get("message_id")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    builder = InlineKeyboardBuilder()
    if len(photos) > 0:
        builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_inventory")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(1)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message_id,
            text=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ QR-–∫–æ–¥–æ–≤ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n\nüì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {len(photos)}",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@router.callback_query(F.data == "confirm_inventory")
async def confirm_inventory(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    username = f"@{callback.from_user.username}" if callback.from_user.username else None
    user = UserService.get_user_by_username(username)
    if not user or not user.object:
        await callback.answer(MSG_NO_OBJECT, show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await callback.message.edit_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é QR-–∫–æ–¥—ã...", reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu").as_markup())
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        found_tools, missing_tools = await QRCodeService.process_inventory_photos(
            photos, user.object.id, callback.bot
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        QRCodeService.update_inventory_statuses(found_tools, missing_tools)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
        check = InventoryCheckService.create_check(
            user_id=user.id, 
            object_id=user.object.id, 
            date=datetime.utcnow()
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        total_tools = len(found_tools) + len(missing_tools)
        xml_report = InventoryReportService.generate_inventory_xml(
            object_name=user.object.name,
            user_name=user.username,
            date=check.date,
            found_tools=found_tools,
            missing_tools=missing_tools,
            total_tools=total_tools
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ
        summary_text = InventoryReportService.generate_summary_text(
            object_name=user.object.name,
            found_tools=found_tools,
            missing_tools=missing_tools,
            total_tools=total_tools
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await callback.message.edit_text(
            summary_text,
            reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu").as_markup()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º XML-–æ—Ç—á–µ—Ç –∫–∞–∫ —Ñ–∞–π–ª
        import tempfile
        import os
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', suffix='.xml', delete=False, encoding='utf-8') as temp_file:
            temp_file.write(xml_report)
            temp_file_path = temp_file.name
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await callback.message.answer_document(
                document=FSInputFile(
                    path=temp_file_path,
                    filename=f"inventory_report_{user.object.name}_{check.date.strftime('%Y%m%d_%H%M%S')}.xml"
                ),
                caption=f"üìÑ XML-–æ—Ç—á–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ '{user.object.name}' –æ—Ç {check.date.strftime('%d.%m.%Y %H:%M')}"
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_file_path):
                os.unlink(temp_file_path)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}",
            reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu").as_markup()
        )
    
    await state.clear()

@router.callback_query(F.data == "object_workers")
async def show_object_workers(callback: CallbackQuery):
    username = f"@{callback.from_user.username}" if callback.from_user.username else None
    user = UserService.get_user_by_username(username)
    if not user or not user.object:
        await callback.answer(MSG_NO_OBJECT, show_alert=True)
        return
    db = SessionLocal()
    try:
        workers = db.query(User).filter(User.object_id == user.object.id, User.role_id == 3).all()
    finally:
        db.close()
    if not workers:
        await callback.message.edit_text("–ù–∞ –≤–∞—à–µ–º –æ–±—ä–µ–∫—Ç–µ –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö.", reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu").as_markup())
        return
    text = "üë∑ –†–∞–±–æ—á–∏–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ:\n"
    for w in workers:
        text += f"‚Ä¢ {w.username} ({w.name or '–ë–µ–∑ –∏–º–µ–Ω–∏'})\n"
    await callback.message.edit_text(text, reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu").as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    username = f"@{callback.from_user.username}" if callback.from_user.username else None
    user = UserService.get_user_by_username(username)
    if user and user.role and user.role.name == "–ø—Ä–æ—Ä–∞–± –æ–±—ä–µ–∫—Ç–∞":
        await callback.message.edit_text(MSG_FOREMAN_MENU, reply_markup=get_foreman_menu())
    else:
        await callback.message.edit_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=get_worker_menu()) 
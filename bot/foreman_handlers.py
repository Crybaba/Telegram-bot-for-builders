from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.user_service import UserService
from services.tool_request_service import ToolRequestService
from services.inventory_check_service import InventoryCheckService
from database.connection import SessionLocal
from database.models import User, Object, Tool, ToolRequest, InventoryCheck
from aiogram import Bot
from datetime import datetime
import xml.etree.ElementTree as ET

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –±—Ä–∏–≥–∞–¥–∏—Ä–∞
def get_foreman_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üë• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç", callback_data="registrations")
    builder.button(text="üë∑ –†–∞–±–æ—á–∏–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ", callback_data="object_workers")
    builder.button(text="üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ –æ–±—ä–µ–∫—Ç–µ", callback_data="foreman_tools")
    builder.button(text="üì¶ –ó–∞—è–≤–∫–∏ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="foreman_requests")
    builder.button(text="üìã –ü—Ä–æ–≤–µ—Å—Ç–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é", callback_data="start_inventory")
    builder.adjust(1)
    return builder.as_markup()

@router.message(Command("foreman"))
async def cmd_foreman_menu(message: Message):
    await message.answer("–ú–µ–Ω—é –±—Ä–∏–≥–∞–¥–∏—Ä–∞:", reply_markup=get_foreman_menu())

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –æ–±—ä–µ–∫—Ç
@router.callback_query(F.data == "registrations")
async def show_registrations(callback: CallbackQuery):
    username = f"@{callback.from_user.username}" if callback.from_user.username else None
    user = UserService.get_user_by_username(username)
    if not user or not user.object:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –æ–±—ä–µ–∫—Ç.", show_alert=True)
        return
    db = SessionLocal()
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é 1 (–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ) –Ω–∞ –¥–∞–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
        registrations = db.query(User).filter(
            User.object_id == user.object.id, 
            User.role_id == 1  # –¢–æ–ª—å–∫–æ "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        ).all()
    finally:
        db.close()
    if not registrations:
        await callback.message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –≤–∞—à –æ–±—ä–µ–∫—Ç.")
        return
    for reg in registrations:
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_reg_{reg.id}")
        builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_reg_{reg.id}")
        await callback.message.answer(f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {reg.username} ({reg.name or '–ë–µ–∑ –∏–º–µ–Ω–∏'})", reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("approve_reg_"))
async def approve_registration(callback: CallbackQuery):
    reg_id = int(callback.data.removeprefix("approve_reg_"))
    username = f"@{callback.from_user.username}" if callback.from_user.username else None
    foreman = UserService.get_user_by_username(username)
    if not foreman or not foreman.object:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –æ–±—ä–µ–∫—Ç.", show_alert=True)
        return
    if UserService.approve_user(reg_id, foreman.object.id):
        await callback.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = UserService.get_user_by_id(reg_id)
        if user:
            try:
                await callback.bot.send_message(
                    user.username,
                    f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–∞! –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –æ–±—ä–µ–∫—Ç: {foreman.object.name}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data.startswith("reject_reg_"))
async def reject_registration(callback: CallbackQuery):
    reg_id = int(callback.data.removeprefix("reject_reg_"))
    if UserService.reject_user(reg_id):
        await callback.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = UserService.get_user_by_id(reg_id)
        if user:
            try:
                await callback.bot.send_message(
                    user.username,
                    "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞."
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ
@router.callback_query(F.data == "foreman_tools")
async def show_foreman_tools(callback: CallbackQuery):
    username = f"@{callback.from_user.username}" if callback.from_user.username else None
    user = UserService.get_user_by_username(username)
    if not user or not user.object:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –æ–±—ä–µ–∫—Ç.", show_alert=True)
        return
    tools = user.object.tools
    if not tools:
        await callback.message.answer("üîß –ù–∞ –≤–∞—à–µ–º –æ–±—ä–µ–∫—Ç–µ –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.")
        return
    text = "üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ –≤–∞—à–µ–º –æ–±—ä–µ–∫—Ç–µ:\n"
    for tool in tools:
        text += f"‚Ä¢ {tool.tool_name.name} (–∏–Ω–≤. ‚Ññ{tool.inventory_number}) ‚Äî {tool.status.name}\n"
    await callback.message.answer(text)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
@router.callback_query(F.data == "foreman_requests")
async def show_foreman_requests(callback: CallbackQuery):
    username = f"@{callback.from_user.username}" if callback.from_user.username else None
    user = UserService.get_user_by_username(username)
    if not user or not user.object:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –æ–±—ä–µ–∫—Ç.", show_alert=True)
        return
    db = SessionLocal()
    try:
        requests = db.query(ToolRequest).filter(ToolRequest.from_object_id == user.object.id).all()
    finally:
        db.close()
    if not requests:
        await callback.message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.")
        return
    for req in requests:
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_req_{req.id}")
        builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_req_{req.id}")
        await callback.message.answer(f"–ó–∞—è–≤–∫–∞: {req.tool.tool_name.name} (–∏–Ω–≤. ‚Ññ{req.tool.inventory_number}) –¥–ª—è {req.to_object.name}", reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("approve_req_"))
async def approve_tool_request(callback: CallbackQuery):
    req_id = int(callback.data.removeprefix("approve_req_"))
    db = SessionLocal()
    try:
        req = db.query(ToolRequest).filter(ToolRequest.id == req_id).first()
        if req:
            req.status_id = 2  # –û–¥–æ–±—Ä–µ–Ω–æ
            req.tool.current_object_id = req.to_object_id
            db.commit()
    finally:
        db.close()
    await callback.message.answer("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–Ω!")

@router.callback_query(F.data.startswith("reject_req_"))
async def reject_tool_request(callback: CallbackQuery):
    req_id = int(callback.data.removeprefix("reject_req_"))
    db = SessionLocal()
    try:
        req = db.query(ToolRequest).filter(ToolRequest.id == req_id).first()
        if req:
            req.status_id = 3  # –û—Ç–∫–ª–æ–Ω–µ–Ω–æ
            db.commit()
    finally:
        db.close()
    await callback.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")

# –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è: FSM –¥–ª—è —Å–±–æ—Ä–∞ —Ñ–æ—Ç–æ QR-–∫–æ–¥–æ–≤
from aiogram.fsm.state import State, StatesGroup

class InventoryStates(StatesGroup):
    waiting_for_photos = State()
    confirm = State()

@router.callback_query(F.data == "start_inventory")
async def start_inventory(callback: CallbackQuery, state: FSMContext):
    await state.set_state(InventoryStates.waiting_for_photos)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ QR-–∫–æ–¥–æ–≤ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.")

@router.message(InventoryStates.waiting_for_photos)
async def receive_photos(message: Message, state: FSMContext):
    photos = (await state.get_data()).get("photos", [])
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)
    await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.", reply_markup=InlineKeyboardBuilder().button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_inventory").as_markup())

@router.callback_query(F.data == "confirm_inventory")
async def confirm_inventory(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    username = f"@{callback.from_user.username}" if callback.from_user.username else None
    user = UserService.get_user_by_username(username)
    if not user or not user.object:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –æ–±—ä–µ–∫—Ç.", show_alert=True)
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é
    check = InventoryCheckService.create_check(user_id=user.id, object_id=user.object.id, date=datetime.utcnow())
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XML –¥–ª—è 1C
    root = ET.Element("InventoryCheck")
    ET.SubElement(root, "Object").text = user.object.name
    ET.SubElement(root, "Date").text = check.date.strftime("%Y-%m-%d %H:%M:%S")
    ET.SubElement(root, "User").text = user.username
    photos_elem = ET.SubElement(root, "Photos")
    for file_id in photos:
        ET.SubElement(photos_elem, "Photo").text = file_id
    xml_str = ET.tostring(root, encoding="utf-8").decode("utf-8")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∏ XML
    await callback.message.answer("–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ—Ç XML –¥–ª—è 1C:")
    await callback.message.answer(f"<pre>{xml_str}</pre>", parse_mode="HTML")
    await state.clear()

@router.callback_query(F.data == "object_workers")
async def show_object_workers(callback: CallbackQuery):
    username = f"@{callback.from_user.username}" if callback.from_user.username else None
    user = UserService.get_user_by_username(username)
    if not user or not user.object:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –æ–±—ä–µ–∫—Ç.", show_alert=True)
        return
    db = SessionLocal()
    try:
        workers = db.query(User).filter(User.object_id == user.object.id, User.role_id == 3).all()
    finally:
        db.close()
    if not workers:
        await callback.message.answer("–ù–∞ –≤–∞—à–µ–º –æ–±—ä–µ–∫—Ç–µ –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö.")
        return
    text = "üë∑ –†–∞–±–æ—á–∏–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ:\n"
    for w in workers:
        text += f"‚Ä¢ {w.username} ({w.name or '–ë–µ–∑ –∏–º–µ–Ω–∏'})\n"
    await callback.message.answer(text) 